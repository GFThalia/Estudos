### GENERICS: LESSON
### Review
In this lesson we’ve covered how:

- Generics help us make generic, scalable code.
- The diamond operator (<>) is used to define generic classes, interfaces, or methods.
- Generics provide compile-time type safety and bug detection as opposed to raw types.
- We can create multiple bound generic classes, interfaces, and methods.
- Wildcards are used to define unknown types.
- To Add upper bounds to type parameters and wildcards.
- To Add lower bounds to wildcards.

### COLLECTIONS: LESSON
### Review
 In this lesson we’ve covered:

- The collection framework hierarchy and its core interfaces.
- The root Collection interface of the hierarchy.
- The List interface and its ArrayList and LinkedList implementations.
- The Set interface and its HashSet, LinkedHashSet, and TreeSet implementations.
- The Queue interface and its LinkedList and PriorityQueue implementations.
- The Deque interface and its LinkedList and ArrayDeque implementations.
- The Map interface and its HashMap, LinkedHashMap, and TreeMap implementations.
- The Collections utility algorithm static methods like sort(), binarySearch(), max(), min(), and reverse().
- Collection stream pipelines and aggregate operations with lambdas.

#### Universal (Generic) Algorithms
When using generics in Java, universal (generic) algorithms can be created for different types.

#### Generics
In Java, generics allow classes and interface types to be used as parameters to define classes, interfaces, or methods.

#### Benefits of Generics
In Java, generics allow for stronger type checking and bug detection at compile time.

#### Diamond Operators
When using generics in Java, the diamond operator (<>) is used to declare the type parameter.

#### super
When using generics in Java, the super keyword is used to define a lower bound type on a wildcard.

#### Wildcards
In Java, the wildcard (?) is used to specify an unknown generic type parameter.

#### extends
When using generics in Java, the extends keyword is used to define an upper bound type on type parameter or wildcard.

#### Wrapper Classes
Wrapper classes are provided to allow primitive values to be used with generic code.

### Project: Let's Get Takeout!
Hope you’re hungry! Using the collections framework, generics, and the rest of your knowledge of Java we’ll create a take-out system. We’ll define classes, interfaces, and methods (generic and non-generic) needed to represent our system and perform our take-out logic with the help of Java collections.