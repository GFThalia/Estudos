### Review: Higher-Order Function

By thinking about [functions](https://www.codecademy.com/resources/docs/javascript/functions) as data, and learning about higher-order functions, i’ve taken important steps in learning to write clean, modular code that takes advantage of JavaScript’s flexibility:

- Abstraction allows us to write complicated code in a way that’s easy to reuse, debug, and understand for human readers.
- We can work with functions the same way we work with any other type of data, including reassigning them to new [variables](https://www.codecademy.com/resources/docs/javascript/variables).
- JavaScript functions are first-class [objects](https://www.codecademy.com/resources/docs/javascript/objects), so they have properties and [methods](https://www.codecademy.com/resources/docs/javascript/methods) like any other object.
- Functions can be passed into other functions as parameters.
- A higher-order function is a function that either accepts functions as parameters, returns a function, or both.


### Review Iterators

- [`.forEach()`](https://www.codecademy.com/resources/docs/javascript/arrays/forEach) is used to execute the same code on every element in an array but does not change the array and returns `undefined`.
- [`.map()`](https://www.codecademy.com/resources/docs/javascript/arrays/map) executes the same code on every element in an array and returns a new array with the updated elements.
- [`.filter()`](https://www.codecademy.com/resources/docs/javascript/arrays/filter) checks every element in an array to see if it meets certain criteria and returns a new array with the elements that return truthy for the criteria.
- [`.findIndex()`](https://www.codecademy.com/resources/docs/javascript/arrays/findIndex) returns the index of the first element of an array that satisfies a condition in the callback function. It returns `1` if none of the elements in the array satisfies the condition.
- [`.reduce()`](https://www.codecademy.com/resources/docs/javascript/arrays/reduce) iterates through an array and takes the values of the elements and returns a single value.
- All iterator methods take a callback function, which can be a pre-defined function, a function expression, or an arrow function.
- You can visit the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) to learn more about iterator methods (and all other parts of JavaScript!).